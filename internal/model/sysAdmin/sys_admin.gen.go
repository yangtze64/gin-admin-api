// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package sysAdmin

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-admin-api/internal/model/entity"
)

func newSysAdmin(db *gorm.DB, opts ...gen.DOOption) sysAdmin {
	_sysAdmin := sysAdmin{}

	_sysAdmin.sysAdminDo.UseDB(db, opts...)
	_sysAdmin.sysAdminDo.UseModel(&entity.SysAdmin{})

	tableName := _sysAdmin.sysAdminDo.TableName()
	_sysAdmin.ALL = field.NewAsterisk(tableName)
	_sysAdmin.ID = field.NewInt32(tableName, "id")
	_sysAdmin.UID = field.NewString(tableName, "uid")
	_sysAdmin.Realname = field.NewString(tableName, "realname")
	_sysAdmin.Mobile = field.NewString(tableName, "mobile")
	_sysAdmin.AreaCode = field.NewString(tableName, "area_code")
	_sysAdmin.Email = field.NewString(tableName, "email")
	_sysAdmin.Weixin = field.NewString(tableName, "weixin")
	_sysAdmin.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_sysAdmin.CreatedAt = field.NewTime(tableName, "created_at")
	_sysAdmin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysAdmin.Operator = field.NewString(tableName, "operator")
	_sysAdmin.IsDeleted = field.NewBool(tableName, "is_deleted")
	_sysAdmin.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysAdmin.fillFieldMap()

	return _sysAdmin
}

type sysAdmin struct {
	sysAdminDo sysAdminDo

	ALL           field.Asterisk
	ID            field.Int32
	UID           field.String // UID
	Realname      field.String // 真实姓名
	Mobile        field.String // 电话号
	AreaCode      field.String // 区号
	Email         field.String // EMAIL
	Weixin        field.String // 微信号
	LastLoginTime field.Time   // 最后一次登录时间
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 修改时间
	Operator      field.String // 操作人
	IsDeleted     field.Bool   // 是否删除
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysAdmin) Table(newTableName string) *sysAdmin {
	s.sysAdminDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysAdmin) As(alias string) *sysAdmin {
	s.sysAdminDo.DO = *(s.sysAdminDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysAdmin) updateTableName(table string) *sysAdmin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.UID = field.NewString(table, "uid")
	s.Realname = field.NewString(table, "realname")
	s.Mobile = field.NewString(table, "mobile")
	s.AreaCode = field.NewString(table, "area_code")
	s.Email = field.NewString(table, "email")
	s.Weixin = field.NewString(table, "weixin")
	s.LastLoginTime = field.NewTime(table, "last_login_time")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Operator = field.NewString(table, "operator")
	s.IsDeleted = field.NewBool(table, "is_deleted")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysAdmin) WithContext(ctx context.Context) *sysAdminDo { return s.sysAdminDo.WithContext(ctx) }

func (s sysAdmin) TableName() string { return s.sysAdminDo.TableName() }

func (s sysAdmin) Alias() string { return s.sysAdminDo.Alias() }

func (s *sysAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysAdmin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["uid"] = s.UID
	s.fieldMap["realname"] = s.Realname
	s.fieldMap["mobile"] = s.Mobile
	s.fieldMap["area_code"] = s.AreaCode
	s.fieldMap["email"] = s.Email
	s.fieldMap["weixin"] = s.Weixin
	s.fieldMap["last_login_time"] = s.LastLoginTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["operator"] = s.Operator
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysAdmin) clone(db *gorm.DB) sysAdmin {
	s.sysAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysAdmin) replaceDB(db *gorm.DB) sysAdmin {
	s.sysAdminDo.ReplaceDB(db)
	return s
}

type sysAdminDo struct{ gen.DO }

func (s sysAdminDo) Debug() *sysAdminDo {
	return s.withDO(s.DO.Debug())
}

func (s sysAdminDo) WithContext(ctx context.Context) *sysAdminDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysAdminDo) ReadDB() *sysAdminDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysAdminDo) WriteDB() *sysAdminDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysAdminDo) Session(config *gorm.Session) *sysAdminDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysAdminDo) Clauses(conds ...clause.Expression) *sysAdminDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysAdminDo) Returning(value interface{}, columns ...string) *sysAdminDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysAdminDo) Not(conds ...gen.Condition) *sysAdminDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysAdminDo) Or(conds ...gen.Condition) *sysAdminDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysAdminDo) Select(conds ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysAdminDo) Where(conds ...gen.Condition) *sysAdminDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysAdminDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysAdminDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysAdminDo) Order(conds ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysAdminDo) Distinct(cols ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysAdminDo) Omit(cols ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysAdminDo) Join(table schema.Tabler, on ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysAdminDo) Group(cols ...field.Expr) *sysAdminDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysAdminDo) Having(conds ...gen.Condition) *sysAdminDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysAdminDo) Limit(limit int) *sysAdminDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysAdminDo) Offset(offset int) *sysAdminDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysAdminDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysAdminDo) Unscoped() *sysAdminDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysAdminDo) Create(values ...*entity.SysAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysAdminDo) CreateInBatches(values []*entity.SysAdmin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysAdminDo) Save(values ...*entity.SysAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysAdminDo) First() (*entity.SysAdmin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysAdmin), nil
	}
}

func (s sysAdminDo) Take() (*entity.SysAdmin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysAdmin), nil
	}
}

func (s sysAdminDo) Last() (*entity.SysAdmin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysAdmin), nil
	}
}

func (s sysAdminDo) Find() ([]*entity.SysAdmin, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysAdmin), err
}

func (s sysAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysAdmin, err error) {
	buf := make([]*entity.SysAdmin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysAdminDo) FindInBatches(result *[]*entity.SysAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysAdminDo) Attrs(attrs ...field.AssignExpr) *sysAdminDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysAdminDo) Assign(attrs ...field.AssignExpr) *sysAdminDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysAdminDo) Joins(fields ...field.RelationField) *sysAdminDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysAdminDo) Preload(fields ...field.RelationField) *sysAdminDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysAdminDo) FirstOrInit() (*entity.SysAdmin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysAdmin), nil
	}
}

func (s sysAdminDo) FirstOrCreate() (*entity.SysAdmin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysAdmin), nil
	}
}

func (s sysAdminDo) FindByPage(offset int, limit int) (result []*entity.SysAdmin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysAdminDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysAdminDo) Delete(models ...*entity.SysAdmin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysAdminDo) withDO(do gen.Dao) *sysAdminDo {
	s.DO = *do.(*gen.DO)
	return s
}
